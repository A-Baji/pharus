name: Development
on:
  pull_request:
  push:
    tags:
      - '*.*.*'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - py_ver: 3.8
            distro: alpine
            image: djbase
    env:
      PY_VER: ${{matrix.py_ver}}
      DISTRO: ${{matrix.distro}}
      IMAGE: ${{matrix.image}}
      DOCKER_CLIENT_TIMEOUT: "120"
      COMPOSE_HTTP_TIMEOUT: "120"
      AS_SCRIPT: "TRUE"
    steps:
      - uses: actions/checkout@v2
      - name: Compile image
        run: |
          PHARUS_VERSION=$(cat pharus/version.py | tail -1 | awk -F\' '{print $2}')
          HOST_UID=$(id -u)
          docker-compose -f docker-compose-build.yaml up --exit-code-from pharus --build
          IMAGE=$(docker images --filter "reference=datajoint/pharus*" \
            --format "{{.Repository}}")
          TAG=$(docker images --filter "reference=datajoint/pharus*" --format "{{.Tag}}")
          docker save "${IMAGE}:${TAG}" | \
            gzip > "image-pharus-${PHARUS_VERSION}-py${PY_VER}-${DISTRO}.tar.gz"
          echo "::set-env name=PHARUS_VERSION::$PHARUS_VERSION"
      - name: Add image artifact
        uses: actions/upload-artifact@v2
        with:
          name: image-pharus-${{env.PHARUS_VERSION}}-py${{matrix.py_ver}}-${{matrix.distro}}
          path: >
            image-pharus-${{env.PHARUS_VERSION}}-py${{matrix.py_ver}}-${{matrix.distro}}.tar.gz
          retention-days: 1
      - name: Add pip wheel artifact
        uses: actions/upload-artifact@v2
        with:
          name: pip-wheel-pharus-${{env.PHARUS_VERSION}}
          path: >
            dist/pharus-${{env.PHARUS_VERSION}}-*.whl
          retention-days: 1
      - name: Add pip sdist artifact
        uses: actions/upload-artifact@v2
        with:
          name: pip-sdist-pharus-${{env.PHARUS_VERSION}}
          path: >
            dist/pharus-${{env.PHARUS_VERSION}}.tar.gz
          retention-days: 1
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - py_ver: 3.8
            distro: alpine
            image: djbase
    env:
      PY_VER: ${{matrix.py_ver}}
      DISTRO: ${{matrix.distro}}
      IMAGE: ${{matrix.image}}
      DOCKER_CLIENT_TIMEOUT: "120"
      COMPOSE_HTTP_TIMEOUT: "120"
      AS_SCRIPT: "TRUE"
    steps:
      - uses: actions/checkout@v2
      - name: Set env variables
        run: |
          PHARUS_VERSION=$(cat pharus/version.py | tail -1 | awk -F\' '{print $2}')
          echo "::set-env name=PHARUS_VERSION::$PHARUS_VERSION"
      - name: Fetch image artifact
        uses: actions/download-artifact@v2
        with:
          name: image-pharus-${{env.PHARUS_VERSION}}-py${{matrix.py_ver}}-${{matrix.distro}}
      - name: Run primary tests
        run: |
          HOST_UID=$(id -u)
          docker load < "image-pharus-${PHARUS_VERSION}-py${PY_VER}-${DISTRO}.tar.gz"
          docker-compose -f docker-compose-test.yaml up --exit-code-from pharus
  # publish:
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
  #   needs: test
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       include:
  #         - py_ver: 3.8
  #           distro: alpine
  #           image: djbase
  #   env:
  #     PY_VER: ${{matrix.py_ver}}
  #     DISTRO: ${{matrix.distro}}
  #     IMAGE: ${{matrix.image}}
  #     DOCKER_USERNAME: ${{secrets.docker_username}}
  #     DOCKER_PASSWORD: ${{secrets.docker_password}}
  #   steps:
  #     - name: Fetch image artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ${{format('{0}-py{1}-{2}', matrix.conda_ver, matrix.py_ver, matrix.distro)}}
  #     - name: Publish image
  #       run: |
  #         echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  #         docker load < "${CONDA_VER}-py${PY_VER}-${DISTRO}.tar.gz"
  #         IMAGE=$(docker images --filter "reference=datajoint/*" --format "{{.Repository}}")
  #         TAG=$(docker images --filter "reference=datajoint/*" --format "{{.Tag}}")
  #         docker push "${IMAGE}:${TAG}"
  #         docker tag "${IMAGE}:${TAG}" "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
  #         docker push "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
  #         [ "$PY_VER" == "3.9" ] && [ "$DISTRO" == "debian" ] \
  #                 && docker tag "${IMAGE}:${TAG}" "${IMAGE}:latest" \
  #                 && docker push "${IMAGE}:latest" \
  #             || echo "skipping 'latest' tag..."
  # publish-docs:
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Build docs
  #       uses: ammaraskar/sphinx-action@master
  #       with:
  #         docs-folder: "docs/"
  #     # - name: Upload docs artifact
  #     #   uses: actions/upload-artifact@v1
  #     #   with:
  #     #     name: docs-html
  #     #     path: docs/_build/html/
  #     #     retention-days: 1
  #     - name: Commit documentation changes
  #       run: |
  #         git clone https://github.com/${GITHUB_REPOSITORY}.git \
  #             --branch gh-pages --single-branch gh-pages
  #         rm -R gh-pages/*
  #         cp -r docs/_build/html/* gh-pages/
  #         cp .gitignore gh-pages/
  #         touch gh-pages/.nojekyll
  #         cd gh-pages
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "GitHub Action"
  #         git add . --all
  #         git commit -m "Update documentation" -a || true
  #         # The above command will fail if no changes were present, so we ignore
  #         # the return code.
  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         branch: gh-pages
  #         directory: gh-pages
  #         github_token: ${{secrets.GITHUB_TOKEN}}