version: "v0.0.0"
LabBook: null
Test: "hello world"
SciViz: # top level tab
  auth:
    mode: database # reuse from DJ LabBook
  pages: # individual pages
    page2:
      route: /session1 # dev, be careful of name collisions
      args:
        - subject_name
        - session_number
      hidden: true
      grids:
        grid1:
          type: fixed
          components:
            insert:
              route: /insert
              x: 1
              y: 2
              height: 1
              width: 1
              type: form
              tables:
                - alpha_company.Computer
                - alpha_company.Employee
            component1:
              route: /query1
              row_span: 0
              column_span: 0
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA, test_group1_simple.TableB)
                    q = TableA * TableB
                    f = []
                    return dict(query=q, fetch_args=f)
        grid2:
          type: fixed
          components:
            component1:
              route: /query2
              row_span: 0
              column_span: 0
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA, test_group1_simple.TableB)
                    q = TableA * TableB
                    f = []
                    return dict(query=q, fetch_args=f)
          
    page1:
      route: /session2 # dev, be careful of name collisions
      args:
        - subject_name
        - session_number
      hidden: true
      grids:
        grid1:
          type: fixed
          max_component_per_page: 20
          rows: 1
          columns: 3
          components:
            component1:
              route: /query3
              row_span: 0
              column_span: 0
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA, test_group1_simple.TableB)
                    q = TableA * TableB
                    f = []
                    return dict(query=q, fetch_args=f)
            component2:
              route: /query4
              row_span: 0
              column_span: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA, test_group1_simple.TableB)
                    q = TableA * TableB
                    f = []
                    return dict(query=q, fetch_args=f)
              diff_checker: >
                def diff_checker(**args):
                  return TrainingStatsPlotly.proj(hash='trial_mean_hash')
            component3:
              route: /query5
              row_span: 0
              column_span: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(a_id=0, **kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA, test_group1_simple.TableB)
                    q = TableA * TableB
                    f = []
                    return dict(query=q, fetch_args=f)
              diff_checker: >
                def diff_checker(**args):
                  return TrainingStatsPlotly.proj(hash='trial_mean_hash')
            plot_test:
              route: /plot1
              type: plot:plotly:stored_json
              x: 0
              y: 0
              height: 1
              width: 1
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs, p_id=2)
              dj_query: >
                def dj_query(test_group1_simple):
                    PlotlyTable = test_group1_simple.PlotlyTable
                    return dict(query=PlotlyTable(), fetch_args=['plot'])
